{"version":3,"file":"job.js","sourceRoot":"","sources":["../src/job.ts"],"names":[],"mappings":"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","sourcesContent":["import Joi from 'joi';\nimport semver from 'semver';\n\nimport { ImageMatchRule, Platform, Workflow } from './common';\nimport * as Android from './android';\nimport * as Ios from './ios';\n\nexport type Job = Android.Job | Ios.Job;\n\ninterface ImageMatchArgs {\n  sdkVersion?: string;\n  reactNativeVersion?: string;\n  workflow: Workflow;\n}\n\nexport const JobSchema = Joi.object<Job>({\n  platform: Joi.string()\n    .valid(...Object.values(Platform))\n    .required(),\n})\n  .when(Joi.object({ platform: Platform.ANDROID }).unknown(), { then: Android.JobSchema })\n  .when(Joi.object({ platform: Platform.IOS }).unknown(), { then: Ios.JobSchema });\n\nexport function sanitizeJob(\n  rawJob: object,\n  { sdkVersion, reactNativeVersion }: { reactNativeVersion?: string; sdkVersion?: string } = {}\n): Job {\n  const { value, error } = JobSchema.validate(rawJob, {\n    stripUnknown: true,\n    convert: true,\n    abortEarly: false,\n  });\n\n  const job: Job = value;\n  if (!job?.builderEnvironment?.image) {\n    const resolveArgs: ImageMatchArgs = {\n      sdkVersion,\n      reactNativeVersion,\n      workflow: job.type,\n    };\n    if (job.platform === Platform.IOS) {\n      setIosBuilderImage(job, resolveArgs);\n    } else if (job.platform === Platform.ANDROID) {\n      setAndroidBuilderImage(job, resolveArgs);\n    }\n  }\n\n  if (error) {\n    throw error;\n  } else {\n    return job;\n  }\n}\n\nfunction doesImageRuleMatch<T extends string>(\n  rule: ImageMatchRule<T>,\n  { sdkVersion, reactNativeVersion, workflow }: ImageMatchArgs\n): boolean {\n  if (rule.reactNativeSemverRange) {\n    if (!reactNativeVersion || !semver.satisfies(reactNativeVersion, rule.reactNativeSemverRange)) {\n      return false;\n    }\n  }\n  if (rule.sdkSemverRange) {\n    if (!sdkVersion || !semver.satisfies(sdkVersion, rule.sdkSemverRange)) {\n      return false;\n    }\n  }\n  if (rule.workflows) {\n    if (!workflow || !rule.workflows.includes(workflow)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function setAndroidBuilderImage(job: Job, args: ImageMatchArgs): void {\n  for (const rule of Android.imageMatchRules) {\n    if (doesImageRuleMatch(rule, args)) {\n      job.builderEnvironment = {\n        ...job.builderEnvironment,\n        image: rule.image,\n      };\n      return;\n    }\n  }\n}\n\nexport function setIosBuilderImage(job: Job, args: ImageMatchArgs): void {\n  for (const rule of Ios.imageMatchRules) {\n    if (doesImageRuleMatch(rule, args)) {\n      job.builderEnvironment = {\n        ...job.builderEnvironment,\n        image: rule.image,\n      };\n      return;\n    }\n  }\n}\n"]}