"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setIosBuilderImage = exports.setAndroidBuilderImage = exports.sanitizeJob = exports.JobSchema = void 0;
const joi_1 = __importDefault(require("joi"));
const semver_1 = __importDefault(require("semver"));
const common_1 = require("./common");
const Android = __importStar(require("./android"));
const Ios = __importStar(require("./ios"));
exports.JobSchema = joi_1.default.object({
    platform: joi_1.default.string()
        .valid(...Object.values(common_1.Platform))
        .required(),
})
    .when(joi_1.default.object({ platform: common_1.Platform.ANDROID }).unknown(), { then: Android.JobSchema })
    .when(joi_1.default.object({ platform: common_1.Platform.IOS }).unknown(), { then: Ios.JobSchema });
function sanitizeJob(rawJob, { sdkVersion, reactNativeVersion } = {}) {
    var _a;
    const { value, error } = exports.JobSchema.validate(rawJob, {
        stripUnknown: true,
        convert: true,
        abortEarly: false,
    });
    const job = value;
    if (!((_a = job === null || job === void 0 ? void 0 : job.builderEnvironment) === null || _a === void 0 ? void 0 : _a.image)) {
        const resolveArgs = {
            sdkVersion,
            reactNativeVersion,
            workflow: job.type,
        };
        if (job.platform === common_1.Platform.IOS) {
            setIosBuilderImage(job, resolveArgs);
        }
        else if (job.platform === common_1.Platform.ANDROID) {
            setAndroidBuilderImage(job, resolveArgs);
        }
    }
    if (error) {
        throw error;
    }
    else {
        return job;
    }
}
exports.sanitizeJob = sanitizeJob;
function doesImageRuleMatch(rule, { sdkVersion, reactNativeVersion, workflow }) {
    if (rule.reactNativeSemverRange) {
        if (!reactNativeVersion || !semver_1.default.satisfies(reactNativeVersion, rule.reactNativeSemverRange)) {
            return false;
        }
    }
    if (rule.sdkSemverRange) {
        if (!sdkVersion || !semver_1.default.satisfies(sdkVersion, rule.sdkSemverRange)) {
            return false;
        }
    }
    if (rule.workflows) {
        if (!workflow || !rule.workflows.includes(workflow)) {
            return false;
        }
    }
    return true;
}
function setAndroidBuilderImage(job, args) {
    for (const rule of Android.imageMatchRules) {
        if (doesImageRuleMatch(rule, args)) {
            job.builderEnvironment = Object.assign(Object.assign({}, job.builderEnvironment), { image: rule.image });
            return;
        }
    }
}
exports.setAndroidBuilderImage = setAndroidBuilderImage;
function setIosBuilderImage(job, args) {
    for (const rule of Ios.imageMatchRules) {
        if (doesImageRuleMatch(rule, args)) {
            job.builderEnvironment = Object.assign(Object.assign({}, job.builderEnvironment), { image: rule.image });
            return;
        }
    }
}
exports.setIosBuilderImage = setIosBuilderImage;
//# sourceMappingURL=job.js.map