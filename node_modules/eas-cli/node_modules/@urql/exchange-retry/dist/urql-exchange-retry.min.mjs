import{share as r,makeSubject as t,mergeMap as e,filter as o,takeUntil as n,debounce as a,fromValue as i,merge as y}from"wonka";import{makeOperation as u}from"@urql/core";const c=({initialDelayMs:c,maxDelayMs:s,randomDelay:m,maxNumberAttempts:d,retryIf:l,retryWith:p})=>{const k=c||1e3,x=s||15e3,f=d||2,D=void 0===m||!!m;return({forward:c})=>s=>{const m=r(s),{source:d,next:w}=t(),C=e((r=>{const{key:t,context:e}=r,y=(e.retryCount||0)+1;let c=e.retryDelay||k;const s=Math.random()+1.5;D&&c*s<x&&(c*=s);const d=o((r=>("query"===r.kind||"teardown"===r.kind)&&r.key===t))(m);return n(d)(a((()=>c))(i(u(r.kind,r,{...r.context,retryDelay:c,retryCount:y}))))}))(d);return o((r=>{if(!r.error||!(l?l(r.error,r.operation):p||r.error.networkError))return!0;if(!((r.operation.context.retryCount||0)>=f-1)){const t=p?p(r.error,r.operation):r.operation;return!t||(w(t),!1)}return!0}))(r(c(y([m,C]))))}};export{c as retryExchange};
//# sourceMappingURL=urql-exchange-retry.min.mjs.map
