"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformBuildTrigger = exports.transformBuildMode = exports.transformIosEnterpriseProvisioning = exports.transformWorkflow = exports.transformMetadata = exports.transformProjectArchive = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const generated_1 = require("../graphql/generated");
function transformProjectArchive(archiveSource) {
    if (archiveSource.type === eas_build_job_1.ArchiveSourceType.S3) {
        return {
            type: generated_1.ProjectArchiveSourceType.S3,
            bucketKey: archiveSource.bucketKey,
        };
    }
    else if (archiveSource.type === eas_build_job_1.ArchiveSourceType.GCS) {
        return {
            type: generated_1.ProjectArchiveSourceType.Gcs,
            bucketKey: archiveSource.bucketKey,
        };
    }
    else if (archiveSource.type === eas_build_job_1.ArchiveSourceType.URL) {
        return {
            type: generated_1.ProjectArchiveSourceType.Url,
            url: archiveSource.url,
        };
    }
    else {
        throw new Error(`Unsupported project archive source type: '${archiveSource.type}'`);
    }
}
exports.transformProjectArchive = transformProjectArchive;
function transformMetadata(metadata) {
    return {
        ...metadata,
        buildMode: metadata.buildMode && transformBuildMode(metadata.buildMode),
        credentialsSource: metadata.credentialsSource && transformCredentialsSource(metadata.credentialsSource),
        distribution: metadata.distribution && transformDistribution(metadata.distribution),
        workflow: metadata.workflow && transformWorkflow(metadata.workflow),
        iosEnterpriseProvisioning: metadata.iosEnterpriseProvisioning &&
            transformIosEnterpriseProvisioning(metadata.iosEnterpriseProvisioning),
    };
}
exports.transformMetadata = transformMetadata;
function transformCredentialsSource(credentialsSource) {
    if (credentialsSource === 'local') {
        return generated_1.BuildCredentialsSource.Local;
    }
    else {
        return generated_1.BuildCredentialsSource.Remote;
    }
}
function transformDistribution(distribution) {
    if (distribution === 'internal') {
        return generated_1.DistributionType.Internal;
    }
    else if (distribution === 'simulator') {
        return generated_1.DistributionType.Simulator;
    }
    else {
        return generated_1.DistributionType.Store;
    }
}
function transformWorkflow(workflow) {
    if (workflow === eas_build_job_1.Workflow.GENERIC) {
        return generated_1.BuildWorkflow.Generic;
    }
    else {
        return generated_1.BuildWorkflow.Managed;
    }
}
exports.transformWorkflow = transformWorkflow;
function transformIosEnterpriseProvisioning(enterpriseProvisioning) {
    if (enterpriseProvisioning === 'adhoc') {
        return generated_1.BuildIosEnterpriseProvisioning.Adhoc;
    }
    else {
        return generated_1.BuildIosEnterpriseProvisioning.Universal;
    }
}
exports.transformIosEnterpriseProvisioning = transformIosEnterpriseProvisioning;
// TODO: check what in metadata
function transformBuildMode(buildMode) {
    if (buildMode === 'build') {
        return generated_1.BuildMode.Build;
    }
    else if (buildMode === 'resign') {
        return generated_1.BuildMode.Resign;
    }
    else if (buildMode === 'custom') {
        return generated_1.BuildMode.Custom;
    }
    else {
        throw new Error(`Unsupported build mode: ${buildMode}`);
    }
}
exports.transformBuildMode = transformBuildMode;
function transformBuildTrigger(buildTrigger) {
    if (buildTrigger === eas_build_job_1.BuildTrigger.EAS_CLI) {
        return generated_1.BuildTrigger.EasCli;
    }
    else if (buildTrigger === eas_build_job_1.BuildTrigger.GIT_BASED_INTEGRATION) {
        return generated_1.BuildTrigger.GitBasedIntegration;
    }
    throw new Error('Unknown build trigger');
}
exports.transformBuildTrigger = transformBuildTrigger;
