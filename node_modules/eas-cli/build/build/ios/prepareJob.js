"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareCredentialsToResign = exports.prepareJobAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const path_1 = tslib_1.__importDefault(require("path"));
const slash_1 = tslib_1.__importDefault(require("slash"));
const projectUtils_1 = require("../../project/projectUtils");
const vcs_1 = require("../../vcs");
const cacheDefaults = {
    disabled: false,
    customPaths: [],
    cacheDefaultPaths: true,
};
async function prepareJobAsync(ctx, jobData) {
    var _a;
    const projectRootDirectory = (0, slash_1.default)(path_1.default.relative(await (0, vcs_1.getVcsClient)().getRootPathAsync(), ctx.projectDir)) || '.';
    const username = (0, projectUtils_1.getUsername)(ctx.exp, ctx.user);
    const buildCredentials = {};
    if (jobData.credentials) {
        const targetNames = Object.keys(jobData.credentials);
        for (const targetName of targetNames) {
            buildCredentials[targetName] = prepareTargetCredentials(jobData.credentials[targetName]);
        }
    }
    const job = {
        type: ctx.workflow,
        platform: eas_build_job_1.Platform.IOS,
        projectArchive: jobData.projectArchive,
        projectRootDirectory,
        builderEnvironment: {
            image: ctx.buildProfile.image,
            node: ctx.buildProfile.node,
            yarn: ctx.buildProfile.yarn,
            bundler: ctx.buildProfile.bundler,
            cocoapods: ctx.buildProfile.cocoapods,
            fastlane: ctx.buildProfile.fastlane,
            expoCli: ctx.buildProfile.expoCli,
            env: ctx.buildProfile.env,
        },
        cache: {
            ...cacheDefaults,
            ...ctx.buildProfile.cache,
            clear: ctx.clearCache,
        },
        secrets: {
            buildCredentials,
        },
        releaseChannel: ctx.buildProfile.releaseChannel,
        updates: { channel: ctx.buildProfile.channel },
        developmentClient: ctx.buildProfile.developmentClient,
        simulator: ctx.buildProfile.simulator,
        scheme: jobData.buildScheme,
        buildConfiguration: ctx.buildProfile.buildConfiguration,
        applicationArchivePath: (_a = ctx.buildProfile.applicationArchivePath) !== null && _a !== void 0 ? _a : ctx.buildProfile.artifactPath,
        buildArtifactPaths: ctx.buildProfile.buildArtifactPaths,
        username,
        ...(ctx.ios.buildNumberOverride && {
            version: {
                buildNumber: ctx.ios.buildNumberOverride,
            },
        }),
        experimental: {
            prebuildCommand: ctx.buildProfile.prebuildCommand,
        },
        mode: eas_build_job_1.BuildMode.BUILD,
        triggeredBy: eas_build_job_1.BuildTrigger.EAS_CLI,
    };
    return (0, eas_build_job_1.sanitizeJob)(job);
}
exports.prepareJobAsync = prepareJobAsync;
function prepareCredentialsToResign(credentials) {
    const buildCredentials = [];
    for (const targetName of Object.keys(credentials !== null && credentials !== void 0 ? credentials : {})) {
        buildCredentials.push({
            targetName,
            provisioningProfileBase64: (0, nullthrows_1.default)(credentials === null || credentials === void 0 ? void 0 : credentials[targetName].provisioningProfile),
            distributionCertificate: {
                dataBase64: (0, nullthrows_1.default)(credentials === null || credentials === void 0 ? void 0 : credentials[targetName].distributionCertificate.certificateP12),
                password: (0, nullthrows_1.default)(credentials === null || credentials === void 0 ? void 0 : credentials[targetName].distributionCertificate.certificatePassword),
            },
        });
    }
    return { buildCredentials };
}
exports.prepareCredentialsToResign = prepareCredentialsToResign;
function prepareTargetCredentials(targetCredentials) {
    return {
        provisioningProfileBase64: targetCredentials.provisioningProfile,
        distributionCertificate: {
            dataBase64: targetCredentials.distributionCertificate.certificateP12,
            password: targetCredentials.distributionCertificate.certificatePassword,
        },
    };
}
