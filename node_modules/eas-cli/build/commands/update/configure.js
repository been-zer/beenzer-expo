"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const log_1 = tslib_1.__importDefault(require("../../log"));
const configure_1 = require("../../update/configure");
class UpdateConfigure extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(UpdateConfigure);
        const platform = flags.platform;
        const { projectConfig: { projectId, exp, projectDir }, loggedIn: { graphqlClient }, } = await this.getContextAsync(UpdateConfigure, {
            nonInteractive: flags['non-interactive'],
        });
        log_1.default.log('ðŸ’¡ The following process will configure your project to run EAS Update. These changes only apply to your local project files and you can safely revert them at any time.');
        await (0, configure_1.ensureEASUpdateIsConfiguredAsync)(graphqlClient, {
            exp,
            projectId,
            projectDir,
            platform,
        });
        await (0, configure_1.ensureEASUpdateIsConfiguredInEasJsonAsync)(projectDir);
        log_1.default.addNewLineIfNone();
        log_1.default.log(`ðŸŽ‰ Your app is configured with EAS Update!`);
        log_1.default.newLine();
        log_1.default.log(`${chalk_1.default.bold('Next steps')}:`);
        log_1.default.newLine();
        log_1.default.log('Update a production build:');
        log_1.default.log(`1. Create a new build. Example: ${chalk_1.default.bold('eas build --profile production')}.`);
        log_1.default.log('2. Make changes in your project.');
        log_1.default.log(`3. Publish an update. Example: ${chalk_1.default.bold('eas update --channel production')}.`);
        log_1.default.log('4. Force close and reopen the app at least twice to view the update.');
        log_1.default.newLine();
        log_1.default.log('Preview an update:');
        log_1.default.log(`1. Publish an update to a branch. Example: ${chalk_1.default.bold('eas update --branch new-feature')}.`);
        log_1.default.log('2. In Expo Go or a development build, navigate to Projects > [project name] > Branch > Open.');
    }
}
exports.default = UpdateConfigure;
_a = UpdateConfigure;
UpdateConfigure.description = 'configure the project to support EAS Update';
UpdateConfigure.flags = {
    platform: core_1.Flags.enum({
        description: 'Platform to configure',
        char: 'p',
        options: ['android', 'ios', 'all'],
        default: 'all',
    }),
    ...flags_1.EASNonInteractiveFlag,
};
UpdateConfigure.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
