"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const queries_1 = require("../../build/queries");
const types_1 = require("../../build/types");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const pagination_1 = require("../../commandUtils/pagination");
const generated_1 = require("../../graphql/generated");
const platform_1 = require("../../platform");
const projectUtils_1 = require("../../project/projectUtils");
const buildDistribution_1 = require("../../utils/buildDistribution");
const json_1 = require("../../utils/json");
class BuildList extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(BuildList);
        const paginatedQueryOptions = (0, pagination_1.getPaginatedQueryOptions)(flags);
        const { json: jsonFlag, platform: requestedPlatform, status: buildStatus, distribution: buildDistribution, 'non-interactive': nonInteractive, } = flags;
        const { projectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(BuildList, {
            nonInteractive,
        });
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const platform = toAppPlatform(requestedPlatform);
        const graphqlBuildStatus = toGraphQLBuildStatus(buildStatus);
        const graphqlBuildDistribution = (0, buildDistribution_1.buildDistributionTypeToGraphQLDistributionType)(buildDistribution);
        const displayName = await (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId);
        await (0, queries_1.listAndRenderBuildsOnAppAsync)(graphqlClient, {
            projectId,
            projectDisplayName: displayName,
            filter: {
                platform,
                status: graphqlBuildStatus,
                distribution: graphqlBuildDistribution,
                channel: flags.channel,
                appVersion: flags.appVersion,
                appBuildVersion: flags.appBuildVersion,
                sdkVersion: flags.sdkVersion,
                runtimeVersion: flags.runtimeVersion,
                appIdentifier: flags.appIdentifier,
                buildProfile: flags.buildProfile,
                gitCommitHash: flags.gitCommitHash,
            },
            paginatedQueryOptions,
        });
    }
}
exports.default = BuildList;
_a = BuildList;
BuildList.description = 'list all builds for your project';
BuildList.flags = {
    platform: core_1.Flags.enum({
        options: [platform_1.RequestedPlatform.All, platform_1.RequestedPlatform.Android, platform_1.RequestedPlatform.Ios],
    }),
    status: core_1.Flags.enum({
        options: [
            types_1.BuildStatus.NEW,
            types_1.BuildStatus.IN_QUEUE,
            types_1.BuildStatus.IN_PROGRESS,
            types_1.BuildStatus.ERRORED,
            types_1.BuildStatus.FINISHED,
            types_1.BuildStatus.CANCELED,
        ],
    }),
    distribution: core_1.Flags.enum({
        options: [
            types_1.BuildDistributionType.STORE,
            types_1.BuildDistributionType.INTERNAL,
            types_1.BuildDistributionType.SIMULATOR,
        ],
    }),
    channel: core_1.Flags.string(),
    appVersion: core_1.Flags.string(),
    appBuildVersion: core_1.Flags.string(),
    sdkVersion: core_1.Flags.string(),
    runtimeVersion: core_1.Flags.string(),
    appIdentifier: core_1.Flags.string(),
    buildProfile: core_1.Flags.string(),
    gitCommitHash: core_1.Flags.string(),
    ...pagination_1.EasPaginatedQueryFlags,
    limit: (0, pagination_1.getLimitFlagWithCustomValues)({ defaultTo: 10, limit: queries_1.BUILDS_LIMIT }),
    ...flags_1.EasNonInteractiveAndJsonFlags,
};
BuildList.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
const toAppPlatform = (requestedPlatform) => {
    if (!requestedPlatform || requestedPlatform === platform_1.RequestedPlatform.All) {
        return undefined;
    }
    else if (requestedPlatform === platform_1.RequestedPlatform.Android) {
        return generated_1.AppPlatform.Android;
    }
    else {
        return generated_1.AppPlatform.Ios;
    }
};
const toGraphQLBuildStatus = (buildStatus) => {
    if (!buildStatus) {
        return undefined;
    }
    else if (buildStatus === types_1.BuildStatus.NEW) {
        return generated_1.BuildStatus.New;
    }
    else if (buildStatus === types_1.BuildStatus.IN_QUEUE) {
        return generated_1.BuildStatus.InQueue;
    }
    else if (buildStatus === types_1.BuildStatus.IN_PROGRESS) {
        return generated_1.BuildStatus.InProgress;
    }
    else if (buildStatus === types_1.BuildStatus.ERRORED) {
        return generated_1.BuildStatus.Errored;
    }
    else if (buildStatus === types_1.BuildStatus.FINISHED) {
        return generated_1.BuildStatus.Finished;
    }
    else {
        return generated_1.BuildStatus.Canceled;
    }
};
